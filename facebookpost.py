# -*- coding: utf-8 -*-
"""facebookpost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18CBR9dBBS1zkAE7eWUtu6HIs81N0cLhg
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

st.set_page_config(page_title="Facebook Engagement Classifier", layout="centered")
st.title("üìä Facebook Post Engagement Classifier")

# Step 1: Load Dataset
@st.cache_data
def load_data():
    try:
        url = "https://archive.ics.uci.edu/static/public/363/dataset/training/features_variant_5.csv"
        df = pd.read_csv(url, header=None)
        df.columns = [f'Feature_{i}' for i in range(1, 55)] + ['Comments_Next_H_Hours']
        return df
    except Exception as e:
        st.error("‚ùå Failed to load dataset. Please check your internet connection or use a local CSV file.")
        return None

df = load_data()

if df is not None:
    # Step 2: Create Engagement Labels
    def classify_comments(x):
        if x < 50:
            return 'Low'
        elif x < 200:
            return 'Medium'
        else:
            return 'High'

    df['Engagement_Level'] = df['Comments_Next_H_Hours'].apply(classify_comments)

    # Step 3: Train Model
    X = df.drop(['Comments_Next_H_Hours', 'Engagement_Level'], axis=1)
    encoder = LabelEncoder()
    y = encoder.fit_transform(df['Engagement_Level'])

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestClassifier()
    model.fit(X_train, y_train)

    # Step 4: User Input
    st.subheader("üîß Enter Post Features")

    feature_1 = st.number_input("Page Popularity (Feature_1)", min_value=0)
    feature_2 = st.number_input("Page Check-ins (Feature_2)", min_value=0)
    feature_3 = st.number_input("Talking About Count (Feature_3)", min_value=0)
    feature_36 = st.number_input("Post Length (Feature_36)", min_value=0)
    feature_37 = st.number_input("Share Count (Feature_37)", min_value=0)
    feature_38 = st.selectbox("Promoted Post? (Feature_38)", ["Yes", "No"])
    feature_39 = st.slider("H Hours (Feature_39)", 0, 23)

    # Step 5: Prediction
    if st.button("üìà Predict Engagement Level"):
        input_features = [feature_1, feature_2, feature_3] + [0]*32 + \
                         [feature_36, feature_37, 1 if feature_38 == "Yes" else 0, feature_39] + [0]*14
        prediction = model.predict([np.array(input_features)])
        label = encoder.inverse_transform(prediction)[0]
        st.success(f"Predicted Engagement Level: **{label}**")
